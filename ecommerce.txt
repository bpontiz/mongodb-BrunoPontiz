Consignas

Utilizando Mongo Shell, crear una base de datos llamada ecommerce que contenga dos colecciones: mensajes y productos.

    > show dbs
    > use ecommerce
    > db.createCollection("mensajes")
    > db.createCollection("productos")

1) Agregar 10 documentos con valores distintos a las colecciones mensajes y productos. El formato de los documentos debe estar en correspondencia con el que venimos utilizando en el entregable con base de datos MariaDB.

    // Agrego de a 5 en coleccion productos
    > db.productos.insertMany([{codigo: "50235", descripcion: "RAM", foto: "http://4123", nombre: "HyperXX", precio: 110, stock: 24},{codigo: "24402", descripcion: "VIDEO", foto: "http://2123", nombre: "Nvidia", precio: 199, stock:76},{codigo: "99821", descripcion: "SSD", foto: "http://2223", nombre: "Storage3T", precio: 300, stock: 102},{codigo: "11762", descripcion: "ROM", foto: "http://2042", nombre: "Odissey", precio: 499, stock: 24},{codigo: "39982", descripcion: "Microprocessor", foto: "http://aj998", nombre: "Dartnet", precio: 999, stock: 5}])

    > db.productos.insertMany([{codigo: "99230", descripcion: "RAM", foto: "http://4323", nombre: "Bull", precio: 1699, stock: 34},{codigo: "76577", descripcion: "VIDEO", foto: "http://6566", nombre: "AMG", precio: 1999, stock:67},{codigo: "99845", descripcion: "SSD", foto: "http://2224", nombre: "WhiteStorage", precio: 2699, stock: 15},{codigo: "11862", descripcion: "ROM", foto: "http://2021", nombre: "Markdam", precio: 4299, stock: 29},{codigo: "10501", descripcion: "Microprocessor", foto: "http://249bb", nombre: "Friert", precio: 4899, stock: 9}])

    // Agrego de a 5 en coleccion mensajes
    > db.mensajes.insertMany([{usuario: "Frodo", mensaje: "Hola Sam", fechaHora: "11/12/2022 12:02:20"},{usuario: "Sam", mensaje: "Hola Frodo", 
    fechaHora: "11/12/2022 12:03:01"},{usuario: "Frodo", mensaje: "Compraste pan?", fechaHora: "11/12/2022 12:03:17"},{usuario: "Sam", mensaje: "Solo pude conseguir el de oregano y queso", fechaHora: "11/12/2022 12:05:41"},{usuario: "Frodo", mensaje: "Sabias que el oregano me causa alergias", fechaHora: "11/12/2022 12:05:12"}])

    > db.mensajes.insertMany([{usuario: "Gandalf", mensaje: "Y mis rabanos, Sam?", fechaHora: "11/12/2022 12:07:23"},{usuario: "Frodo", mensaje: "Eso, y sus rabanos, Sam?", fechaHora: "11/12/2022 12:07:30"},{usuario: "Sam", mensaje: "Nunca mas ire a comprar para ustedes", fechaHora: "11/12/2022 12:07:57"},{usuario: "Gandalf", mensaje: "Ahora voy a tener que comer pan sin rabanos", fechaHora: "11/12/2022 12:13:29"},{usuario: "Frodo", mensaje: "Yo queria pan de fibras", fechaHora: "11/12/2022 12:13:56"}])

2) Definir las claves de los documentos en relación a los campos de las tablas de esa base. En el caso de los productos, poner valores al campo precio entre los 100 y 5000 pesos(eligiendo valores intermedios, ej: 120, 580, 900, 1280, 1700, 2300, 2860, 3350, 4320, 4990).

    // Realizado en punto 1)

3) Listar todos los documentos en cada colección.

    > db.productos.find()

    > db.mensajes.find()

4) Mostrar la cantidad de documentos almacenados en cada una de ellas.

    > db.productos.estimatedDocumentCount()

    > db.mensajes.estimatedDocumentCount()

5) Realizar un CRUD sobre la colección de productos:
    a) Agregar un producto más en la colección de productos

        > db.productos.insertOne({codigo: "54966", descripcion: "SoundZ", foto: "http://7723", nombre: "Kneye", precio: 4099, stock: 11})

    b) Realizar una consulta por nombre de producto específico:
        i)   Listar los productos con precio menor a 1000 pesos.

            > db.productos.find({precio: {$lt: 1000}})

        ii)  Listar los productos con precio entre los 1000 a 3000 pesos.

            > db.productos.find({precio: {$in: [1000,3000]}})

        iii) Listar los productos con precio mayor a 3000 pesos.

            > db.productos.find({precio: {$gt: 3000}})

        iv)  Realizar una consulta que traiga sólo el nombre del tercer producto más barato.

            > db.productos.find({}, {"nombre": 1, "_id": 0}).sort({precio: 1}).skip(2).limit(1)

    c) Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.

        > db.productos.updateMany({precio: {$gt: 0}}, {$set: {stock: 100}})

    d) Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

        > db.productos.updateMany({precio: {$gt: 4000}}, {$set: {stock: 0}})

    e) Borrar los productos con precio menor a 1000 pesos.

        > db.productos.deleteMany({precio: {$lt: 1000}})

6) Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. Verificar que pepe no pueda cambiar la información.

    > use admin
    > db.createUser({user: "pepe", pwd: "asd456", roles: [{role: "read", db: "ecommerce"}]})

    Verificacion de que pepe no pueda cambiar la informacion
    > mongosh -u 'pepe' -p
    





